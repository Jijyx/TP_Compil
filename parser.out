Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression OPERATOR expression
Rule 2     expression -> factor
Rule 3     factor -> NAME
Rule 4     factor -> NUMBER
Rule 5     factor -> PARENTHESES expression PARENTHESES

Terminals, with rules where they appear

NAME                 : 3
NUMBER               : 4
OPERATOR             : 1
PARENTHESES          : 5 5
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 5 0
factor               : 2

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression OPERATOR expression
    (2) expression -> . factor
    (3) factor -> . NAME
    (4) factor -> . NUMBER
    (5) factor -> . PARENTHESES expression PARENTHESES

    NAME            shift and go to state 3
    NUMBER          shift and go to state 4
    PARENTHESES     shift and go to state 5

    expression                     shift and go to state 1
    factor                         shift and go to state 2

state 1

    (0) S' -> expression .
    (1) expression -> expression . OPERATOR expression

    OPERATOR        shift and go to state 6


state 2

    (2) expression -> factor .

    OPERATOR        reduce using rule 2 (expression -> factor .)
    $end            reduce using rule 2 (expression -> factor .)
    PARENTHESES     reduce using rule 2 (expression -> factor .)


state 3

    (3) factor -> NAME .

    OPERATOR        reduce using rule 3 (factor -> NAME .)
    $end            reduce using rule 3 (factor -> NAME .)
    PARENTHESES     reduce using rule 3 (factor -> NAME .)


state 4

    (4) factor -> NUMBER .

    OPERATOR        reduce using rule 4 (factor -> NUMBER .)
    $end            reduce using rule 4 (factor -> NUMBER .)
    PARENTHESES     reduce using rule 4 (factor -> NUMBER .)


state 5

    (5) factor -> PARENTHESES . expression PARENTHESES
    (1) expression -> . expression OPERATOR expression
    (2) expression -> . factor
    (3) factor -> . NAME
    (4) factor -> . NUMBER
    (5) factor -> . PARENTHESES expression PARENTHESES

    NAME            shift and go to state 3
    NUMBER          shift and go to state 4
    PARENTHESES     shift and go to state 5

    expression                     shift and go to state 7
    factor                         shift and go to state 2

state 6

    (1) expression -> expression OPERATOR . expression
    (1) expression -> . expression OPERATOR expression
    (2) expression -> . factor
    (3) factor -> . NAME
    (4) factor -> . NUMBER
    (5) factor -> . PARENTHESES expression PARENTHESES

    NAME            shift and go to state 3
    NUMBER          shift and go to state 4
    PARENTHESES     shift and go to state 5

    expression                     shift and go to state 8
    factor                         shift and go to state 2

state 7

    (5) factor -> PARENTHESES expression . PARENTHESES
    (1) expression -> expression . OPERATOR expression

    PARENTHESES     shift and go to state 9
    OPERATOR        shift and go to state 6


state 8

    (1) expression -> expression OPERATOR expression .
    (1) expression -> expression . OPERATOR expression

  ! shift/reduce conflict for OPERATOR resolved as shift
    $end            reduce using rule 1 (expression -> expression OPERATOR expression .)
    PARENTHESES     reduce using rule 1 (expression -> expression OPERATOR expression .)
    OPERATOR        shift and go to state 6

  ! OPERATOR        [ reduce using rule 1 (expression -> expression OPERATOR expression .) ]


state 9

    (5) factor -> PARENTHESES expression PARENTHESES .

    OPERATOR        reduce using rule 5 (factor -> PARENTHESES expression PARENTHESES .)
    $end            reduce using rule 5 (factor -> PARENTHESES expression PARENTHESES .)
    PARENTHESES     reduce using rule 5 (factor -> PARENTHESES expression PARENTHESES .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPERATOR in state 8 resolved as shift
